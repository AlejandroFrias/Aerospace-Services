

Enterprise Data Objects, or EDO, is a service that Aerospace Corp has been building. Among other things, this service provides an easy way to make many HTTP requests in parallel, handling all the concurrency and caching tasks involved with that. Originally it was designed to grab data from multiple sensors on a rover or other vehicle in a quick way that allows for the addition of more sensors without any decrease in the speed of operations. Our project takes this project and applies it to the problem of distributed data services.
Augmented reality allows the interaction with information around us in a new and powerful way. There are many different sources of information around us, from Google and Yelp restaurant data to Cisco network data, that need to be pulled together all at once. EDO applies itself perfectly to this problem, allowing for a scalable way of communicating to these services. With EDO, the problem of how to connect all these services together has been solved, allowing the developer to focus on finding or creating data services and on the development of the augmented realities connection to the client, whether via an iPad app or a helmet overlay on a astronaut or fireman.
This project is a case study for EDO's effectiveness and potential application to augmented reality and for researching and analyzing the difficulties in developing an augmented reality client. As such, we narrowed the project to a very specific use case that allows to explore different types of services and how EDO will react to that. We also made the simplifying assumption that our GPS data, both of the client and of services we would provide, are accurate, allowing us to ignore image processing and simply use the locations of things for display purposes. Our contrived scenario for testing and research is a person, a student or visitor, walking around Harvey Mudd College's campus. We fabricated several data services for this scenario.
Firstly, the most obvious information about the campus is information about the buildings. We created services that provides along with their locations, their names, what classes are being taught in them, what the menu is at the dining hall, what music is on the dorm's playlist. The main service provides a list of buildings as points of interest (POI's) that are within a given bounding box. Then it uses EDO to compose all the other applicable services for that particular building into one response whenever the user desires more information beyond just the name and location of the building.
The other main service we created gives the user the ability to drop a virtual note on the ground for others to see. A tour, in the style of a breadcrumb trail, can be left for visitors with the app. The notes are very simple, consisting of a title, some text, a location, and some meta-tags for search purposes. This service opens up many test cases, such as having too many points of interest to display on the screen or handling a POI that changes rapidly or that can be destroyed. Also, EDO is used compose both the list of buildings and the list of notes within a given area in parallel, seamlessly adding scalability for adding more services that provide POI's.


ABSTRACT (SA or VW)
INTRODUCTION - relevance of the topic of augmented reality (SA or VW)

What got done (

EDO application (AF)
Scalability (AF)
Services (AF)

Coordinate transformations (SA)

Location Updating - standard practice, hiccups (VW)

Bug fixes in ios - specific to the project (VW)


Conclusion
 Assessment of the difficulty of creating the augmented reality app (Together, AF do the backend talk of this, SA and VW work on the client side of the assessment. Will combine later)

 Future Work (AF)
